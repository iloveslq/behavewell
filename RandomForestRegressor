#RandomForestRegressor()
import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor

#RandomForestRegressor(n_estimators=’warn’, criterion=’mse’, max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features=’auto’, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False)
https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html
#n_estimators 树的个数 默认100
#criterion mse和mae
#max_depth 树的深度 默认none
#max_samples_split 拆分内部节点需要的最小样本 默认2
#min_samples_leaf 叶节点需要的最小样本 默认1
#min_weight_fraction_leaf 叶节点的最小加权分数 默认0
#max_features 特征数 int, auto(n_features), sqrt, log2, None
#max_leaf_nodes 最大叶节点 默认None无限制
#min_impurity_decrease 最小纯洁度增益 默认0
#min_impurity_split 纯洁度阈值 默认1e-7
#bootstrap 默认True
#oob_score 是否包外估计 默认False
#n_jobs none和-1
#random_state 随机数生成器 默认None(np.random)
#verbose 默认0
#warm_start 默认False

调用RandomForestRegressor().fit(x1,y)拟合
然后RandomForestRegressor().predict(x1)预测输出
